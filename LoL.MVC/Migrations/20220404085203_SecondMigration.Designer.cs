// <auto-generated />
using System;
using LoL.MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoL.MVC.Migrations
{
    [DbContext(typeof(LoLDbContext))]
    [Migration("20220404085203_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LoL.MVC.Domain.Composition", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("Legend1Id")
                        .HasColumnType("int");

                    b.Property<int>("Legend2Id")
                        .HasColumnType("int");

                    b.Property<int>("Legend3Id")
                        .HasColumnType("int");

                    b.Property<int>("Legend4Id")
                        .HasColumnType("int");

                    b.Property<int>("Legend5Id")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Legend1Id");

                    b.HasIndex("Legend2Id");

                    b.HasIndex("Legend3Id");

                    b.HasIndex("Legend4Id");

                    b.HasIndex("Legend5Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Game", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Team1Id")
                        .HasColumnType("int");

                    b.Property<int>("Team2Id")
                        .HasColumnType("int");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Team1Id");

                    b.HasIndex("Team2Id");

                    b.HasIndex("WinnerId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Legend", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Legends");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Player", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Team", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Player1Id")
                        .HasColumnType("int");

                    b.Property<int>("Player2Id")
                        .HasColumnType("int");

                    b.Property<int>("Player3Id")
                        .HasColumnType("int");

                    b.Property<int>("Player4Id")
                        .HasColumnType("int");

                    b.Property<int>("Player5Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id")
                        .IsUnique();

                    b.HasIndex("Player2Id")
                        .IsUnique();

                    b.HasIndex("Player3Id")
                        .IsUnique();

                    b.HasIndex("Player4Id")
                        .IsUnique();

                    b.HasIndex("Player5Id")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Composition", b =>
                {
                    b.HasOne("LoL.MVC.Domain.Legend", "Legend1")
                        .WithMany()
                        .HasForeignKey("Legend1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Legend", "Legend2")
                        .WithMany()
                        .HasForeignKey("Legend2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Legend", "Legend3")
                        .WithMany()
                        .HasForeignKey("Legend3Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Legend", "Legend4")
                        .WithMany()
                        .HasForeignKey("Legend4Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Legend", "Legend5")
                        .WithMany()
                        .HasForeignKey("Legend5Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Legend1");

                    b.Navigation("Legend2");

                    b.Navigation("Legend3");

                    b.Navigation("Legend4");

                    b.Navigation("Legend5");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Game", b =>
                {
                    b.HasOne("LoL.MVC.Domain.Composition", "Team1")
                        .WithMany()
                        .HasForeignKey("Team1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Composition", "Team2")
                        .WithMany()
                        .HasForeignKey("Team2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Team", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team1");

                    b.Navigation("Team2");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Player", b =>
                {
                    b.HasOne("LoL.MVC.Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("LoL.MVC.Domain.Team", b =>
                {
                    b.HasOne("LoL.MVC.Domain.Player", "Player1")
                        .WithOne()
                        .HasForeignKey("LoL.MVC.Domain.Team", "Player1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Player", "Player2")
                        .WithOne()
                        .HasForeignKey("LoL.MVC.Domain.Team", "Player2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Player", "Player3")
                        .WithOne()
                        .HasForeignKey("LoL.MVC.Domain.Team", "Player3Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Player", "Player4")
                        .WithOne()
                        .HasForeignKey("LoL.MVC.Domain.Team", "Player4Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LoL.MVC.Domain.Player", "Player5")
                        .WithOne()
                        .HasForeignKey("LoL.MVC.Domain.Team", "Player5Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("Player3");

                    b.Navigation("Player4");

                    b.Navigation("Player5");
                });
#pragma warning restore 612, 618
        }
    }
}
